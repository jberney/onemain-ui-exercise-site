{"version":3,"file":"npm.react-hook-form.56f47ec9beceeab58b46.js","mappings":"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","sources":["webpack://onemain-ui-exercise/./node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.values) || isObject(_options.defaultValues)\n        ? cloneObject(_options.values || _options.defaultValues) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) && get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if (isBoolean(disabled)) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                let requiredDisabledState = disabled;\n                const currentField = get(_fields, name);\n                if (currentField && isBoolean(currentField._f.disabled)) {\n                    requiredDisabledState || (requiredDisabledState = currentField._f.disabled);\n                }\n                ref.disabled = requiredDisabledState;\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? keepStateOptions.keepDefaultValues && _formValues\n                    ? getDirtyFields(_defaultValues, _formValues)\n                    : _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","useFormState","methods","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_updateFormState","_subjects","state","_updateValid","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","index","tempPath","lastIndex","newValue","objValue","isNaN","Controller","render","shouldUnregister","isArrayField","array","values","updateValue","_formValues","_getWatch","_removeUnmounted","useWatch","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","useController","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","requiredDisabledState","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"sourceRoot":""}