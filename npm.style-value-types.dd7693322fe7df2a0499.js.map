{"version":3,"file":"npm.style-value-types.dd7693322fe7df2a0499.js","mappings":"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","sources":["webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/color/hex.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/color/hsla.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/color/index.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/color/rgba.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/color/utils.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/complex/filter.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/complex/index.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/numbers/index.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/numbers/units.mjs","webpack://onemain-ui-exercise/./node_modules/style-value-types/dist/es/utils.mjs"],"sourcesContent":["import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = '';\n    let g = '';\n    let b = '';\n    let a = '';\n    if (v.length > 5) {\n        r = v.substr(1, 2);\n        g = v.substr(3, 2);\n        b = v.substr(5, 2);\n        a = v.substr(7, 2);\n    }\n    else {\n        r = v.substr(1, 1);\n        g = v.substr(2, 1);\n        b = v.substr(3, 1);\n        a = v.substr(4, 1);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString('#'),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString('hsl', 'hue'),\n    parse: splitColor('hue', 'saturation', 'lightness'),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return ('hsla(' +\n            Math.round(hue) +\n            ', ' +\n            percent.transform(sanitize(saturation)) +\n            ', ' +\n            percent.transform(sanitize(lightness)) +\n            ', ' +\n            sanitize(alpha.transform(alpha$1)) +\n            ')');\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty('red')\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { number, alpha } from '../numbers/index.mjs';\nimport { sanitize, clamp } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = clamp(0, 255);\nconst rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });\nconst rgba = {\n    test: isColorString('rgb', 'red'),\n    parse: splitColor('red', 'green', 'blue'),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => 'rgba(' +\n        rgbUnit.transform(red) +\n        ', ' +\n        rgbUnit.transform(green) +\n        ', ' +\n        rgbUnit.transform(blue) +\n        ', ' +\n        sanitize(alpha.transform(alpha$1)) +\n        ')',\n};\n\nexport { rgbUnit, rgba };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\nconst maxDefaults = new Set(['brightness', 'contrast', 'saturate', 'opacity']);\nfunction applyDefaultFilter(v) {\n    let [name, value] = v.slice(0, -1).split('(');\n    if (name === 'drop-shadow')\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, '');\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + '(' + defaultValue + unit + ')';\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(' ') : v;\n    } });\n\nexport { filter };\n","import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nconst colorToken = '${c}';\nconst numberToken = '${n}';\nfunction test(v) {\n    var _a, _b, _c, _d;\n    return (isNaN(v) &&\n        isString(v) &&\n        ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0);\n}\nfunction analyse(v) {\n    if (typeof v === 'number')\n        v = `${v}`;\n    const values = [];\n    let numColors = 0;\n    const colors = v.match(colorRegex);\n    if (colors) {\n        numColors = colors.length;\n        v = v.replace(colorRegex, colorToken);\n        values.push(...colors.map(color.parse));\n    }\n    const numbers = v.match(floatRegex);\n    if (numbers) {\n        v = v.replace(floatRegex, numberToken);\n        values.push(...numbers.map(number.parse));\n    }\n    return { values, numColors, tokenised: v };\n}\nfunction parse(v) {\n    return analyse(v).values;\n}\nfunction createTransformer(v) {\n    const { values, numColors, tokenised } = analyse(v);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === 'number' ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parse(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = { test, parse, createTransformer, getAnimatableNone };\n\nexport { complex };\n","import { clamp } from '../utils.mjs';\n\nconst number = {\n    test: (v) => typeof v === 'number',\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = Object.assign(Object.assign({}, number), { transform: clamp(0, 1) });\nconst scale = Object.assign(Object.assign({}, number), { default: 1 });\n\nexport { alpha, number, scale };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(' ').length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType('deg');\nconst percent = createUnitType('%');\nconst px = createUnitType('px');\nconst vh = createUnitType('vh');\nconst vw = createUnitType('vw');\nconst progressPercentage = Object.assign(Object.assign({}, percent), { parse: (v) => percent.parse(v) / 100, transform: (v) => percent.transform(v * 100) });\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","const clamp = (min, max) => (v) => Math.max(Math.min(v, max), min);\nconst sanitize = (v) => (v % 1 ? Number(v.toFixed(5)) : v);\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))$/i;\nfunction isString(v) {\n    return typeof v === 'string';\n}\n\nexport { clamp, colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n"],"names":["hex","test","parse","v","r","g","b","a","length","substr","red","parseInt","green","blue","alpha","transform","hsla","hue","saturation","lightness","alpha$1","Math","round","color","hasOwnProperty","clampRgbUnit","rgbUnit","Object","assign","rgba","isColorString","type","testProp","Boolean","startsWith","prototype","call","splitColor","aName","bName","cName","c","match","parseFloat","undefined","maxDefaults","Set","applyDefaultFilter","name","value","slice","split","number","unit","replace","defaultValue","has","functionRegex","filter","getAnimatableNone","functions","map","join","colorToken","numberToken","analyse","values","numColors","colors","push","numbers","tokenised","createTransformer","numValues","output","i","convertNumbersToZero","complex","_a","_b","_c","_d","isNaN","parsed","transformer","scale","default","createUnitType","endsWith","degrees","percent","px","vh","vw","progressPercentage","clamp","min","max","sanitize","Number","toFixed","floatRegex","colorRegex","singleColorRegex","isString"],"sourceRoot":""}