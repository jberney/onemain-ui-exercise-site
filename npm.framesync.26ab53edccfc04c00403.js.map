{"version":3,"file":"npm.framesync.26ab53edccfc04c00403.js","mappings":"wKAAA,MAAMA,EAAmB,EAAI,GAAM,IAC7BC,EAAwC,oBAAhBC,YACxB,IAAMA,YAAYC,MAClB,IAAMC,KAAKD,MACXE,EAAgC,oBAAXC,OACpBC,GAAaD,OAAOE,sBAAsBD,GAC1CA,GAAaE,YAAW,IAAMF,EAASN,MAAmBD,GCFjE,IAAIU,GAAoB,EACpBC,GAAe,EACfC,GAAe,EACnB,MAAM,EAAQ,CACVC,MAAO,EACPC,UAAW,GAETC,EAAa,CACf,OACA,SACA,YACA,SACA,cAEEC,EAAQD,EAAWE,QAAO,CAACC,EAAKC,KAClCD,EAAIC,GCnBR,SAA0BR,GACtB,IAAIS,EAAQ,GACRC,EAAiB,GACjBC,EAAW,EACXV,GAAe,EACfW,GAAiB,EACrB,MAAMC,EAAc,IAAIC,QAClBC,EAAO,CACTC,SAAU,CAACpB,EAAUqB,GAAY,EAAOC,GAAY,KAChD,MAAMC,EAAoBD,GAAajB,EACjCmB,EAASD,EAAoBV,EAAQC,EAQ3C,OAPIO,GACAJ,EAAYQ,IAAIzB,IACc,IAA9BwB,EAAOE,QAAQ1B,KACfwB,EAAOG,KAAK3B,GACRuB,GAAqBlB,IACrBU,EAAWF,EAAMe,SAElB5B,CAAQ,EAEnB6B,OAAS7B,IACL,MAAM8B,EAAQhB,EAAeY,QAAQ1B,IACtB,IAAX8B,GACAhB,EAAeiB,OAAOD,EAAO,GACjCb,EAAYe,OAAOhC,EAAS,EAEhCiC,QAAUC,IACN,GAAI7B,EACAW,GAAiB,MADrB,CAQA,GAJAX,GAAe,GACdQ,EAAOC,GAAkB,CAACA,EAAgBD,GAC3CC,EAAec,OAAS,EACxBb,EAAWF,EAAMe,OACbb,EACA,IAAK,IAAIoB,EAAI,EAAGA,EAAIpB,EAAUoB,IAAK,CAC/B,MAAMnC,EAAWa,EAAMsB,GACvBnC,EAASkC,GACLjB,EAAYmB,IAAIpC,KAChBmB,EAAKC,SAASpB,GACdI,IAER,CAEJC,GAAe,EACXW,IACAA,GAAiB,EACjBG,EAAKc,QAAQC,GAlBjB,CAmBA,GAGR,OAAOf,CACX,CDlCekB,EAAiB,IAAOjC,GAAe,IAC3CO,IACR,CAAC,GACE2B,EAAO9B,EAAWE,QAAO,CAACC,EAAKC,KACjC,MAAMO,EAAOV,EAAMG,GAMnB,OALAD,EAAIC,GAAO,CAACqB,EAASZ,GAAY,EAAOC,GAAY,KAC3ClB,GACDmC,IACGpB,EAAKC,SAASa,EAASZ,EAAWC,IAEtCX,CAAG,GACX,CAAC,GACE6B,EAAahC,EAAWE,QAAO,CAACC,EAAKC,KACvCD,EAAIC,GAAOH,EAAMG,GAAKiB,OACflB,IACR,CAAC,GACE8B,EAAYjC,EAAWE,QAAO,CAACC,EAAKC,KACtCD,EAAIC,GAAO,IAAMH,EAAMG,GAAKqB,QAAQ,GAC7BtB,IACR,CAAC,GACE+B,EAAeC,GAAWlC,EAAMkC,GAAQV,QAAQ,GAChDW,EAAgBrC,IAClBH,GAAe,EACf,EAAME,MAAQH,EACRV,EACAoD,KAAKC,IAAID,KAAKE,IAAIxC,EAAY,EAAMA,UAzC3B,IAyCmD,GAClE,EAAMA,UAAYA,EAClBF,GAAe,EACfG,EAAWwC,QAAQN,GACnBrC,GAAe,EACXD,IACAD,GAAoB,EACpBL,EAAY8C,GAChB,EAEEL,EAAY,KACdnC,GAAe,EACfD,GAAoB,EACfE,GACDP,EAAY8C,EAAa,EAE3BK,EAAe,IAAM,EAE3B,G","sources":["webpack://onemain-ui-exercise/./node_modules/framesync/dist/es/on-next-frame.mjs","webpack://onemain-ui-exercise/./node_modules/framesync/dist/es/index.mjs","webpack://onemain-ui-exercise/./node_modules/framesync/dist/es/create-render-step.mjs"],"sourcesContent":["const defaultTimestep = (1 / 60) * 1000;\nconst getCurrentTime = typeof performance !== \"undefined\"\n    ? () => performance.now()\n    : () => Date.now();\nconst onNextFrame = typeof window !== \"undefined\"\n    ? (callback) => window.requestAnimationFrame(callback)\n    : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);\n\nexport { defaultTimestep, onNextFrame };\n","import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst frame = {\n    delta: 0,\n    timestamp: 0,\n};\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frame);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frame);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frame.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);\n    frame.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\nconst getFrameData = () => frame;\n\nexport default sync;\nexport { cancelSync, flushSync, getFrameData };\n","function createRenderStep(runNextFrame) {\n    let toRun = [];\n    let toRunNextFrame = [];\n    let numToRun = 0;\n    let isProcessing = false;\n    let flushNextFrame = false;\n    const toKeepAlive = new WeakSet();\n    const step = {\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        process: (frameData) => {\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            toRunNextFrame.length = 0;\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"names":["defaultTimestep","getCurrentTime","performance","now","Date","onNextFrame","window","callback","requestAnimationFrame","setTimeout","useDefaultElapsed","runNextFrame","isProcessing","delta","timestamp","stepsOrder","steps","reduce","acc","key","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","keepAlive","immediate","addToCurrentFrame","buffer","add","indexOf","push","length","cancel","index","splice","delete","process","frameData","i","has","createRenderStep","sync","startLoop","cancelSync","flushSync","processStep","stepId","processFrame","Math","max","min","forEach","getFrameData"],"sourceRoot":""}